/**
 * Semux API
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.3.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AccountType
 */
export interface AccountType {
    /**
     * The address of this account
     * @type {string}
     * @memberof AccountType
     */
    address?: string;
    /**
     * The available balance of this account
     * @type {string}
     * @memberof AccountType
     */
    available?: string;
    /**
     * The locked balance of this account
     * @type {string}
     * @memberof AccountType
     */
    locked?: string;
    /**
     * The nonce of this account
     * @type {string}
     * @memberof AccountType
     */
    nonce?: string;
    /**
     * The number of transactions received/sent
     * @type {number}
     * @memberof AccountType
     */
    transactionCount?: number;
    /**
     * The number of pending transaction from/to this account
     * @type {number}
     * @memberof AccountType
     */
    pendingTransactionCount?: number;
}
/**
 *
 * @export
 * @interface AccountVoteType
 */
export interface AccountVoteType {
    /**
     *
     * @type {DelegateType}
     * @memberof AccountVoteType
     */
    delegate?: DelegateType;
    /**
     * Total votes from this account to the delegate
     * @type {string}
     * @memberof AccountVoteType
     */
    votes?: string;
}
/**
 *
 * @export
 * @interface ApiHandlerResponse
 */
export interface ApiHandlerResponse {
    /**
     * Whether this operation was processed successfully
     * @type {boolean}
     * @memberof ApiHandlerResponse
     */
    success: boolean;
    /**
     * Success/error message
     * @type {string}
     * @memberof ApiHandlerResponse
     */
    message?: string;
}
/**
 *
 * @export
 * @interface BlockType
 */
export interface BlockType {
    /**
     * The block hash
     * @type {string}
     * @memberof BlockType
     */
    hash?: string;
    /**
     * The block number
     * @type {string}
     * @memberof BlockType
     */
    number?: string;
    /**
     * The view number. # of additional BFT rounds to generated this block
     * @type {number}
     * @memberof BlockType
     */
    view?: number;
    /**
     * The block producer's address
     * @type {string}
     * @memberof BlockType
     */
    coinbase?: string;
    /**
     * The hash of the parent block
     * @type {string}
     * @memberof BlockType
     */
    parentHash?: string;
    /**
     * Block timestamp in milliseconds specified by the block producer.
     * @type {string}
     * @memberof BlockType
     */
    timestamp?: string;
    /**
     * The Merkle root hash of the transactions
     * @type {string}
     * @memberof BlockType
     */
    transactionsRoot?: string;
    /**
     * The Merkle root hash of the results
     * @type {string}
     * @memberof BlockType
     */
    resultsRoot?: string;
    /**
     * The state root hash. Not enabled yet!
     * @type {string}
     * @memberof BlockType
     */
    stateRoot?: string;
    /**
     * The extra data of this block
     * @type {string}
     * @memberof BlockType
     */
    data?: string;
    /**
     * A list of transaction in the block
     * @type {Array&lt;TransactionType&gt;}
     * @memberof BlockType
     */
    transactions?: Array<TransactionType>;
}
/**
 *
 * @export
 * @interface DelegateType
 */
export interface DelegateType {
    /**
     * Delegate address
     * @type {string}
     * @memberof DelegateType
     */
    address?: string;
    /**
     * Delegate name
     * @type {string}
     * @memberof DelegateType
     */
    name?: string;
    /**
     * Delegate registration block number
     * @type {string}
     * @memberof DelegateType
     */
    registeredAt?: string;
    /**
     * Total votes of the delegate
     * @type {string}
     * @memberof DelegateType
     */
    votes?: string;
    /**
     * The number of blocks produced by this delegate
     * @type {string}
     * @memberof DelegateType
     */
    blocksForged?: string;
    /**
     * Forged blocks when the delegate is a primary validator
     * @type {string}
     * @memberof DelegateType
     */
    turnsHit?: string;
    /**
     * Missed blocks when the delegate is a primary validator
     * @type {string}
     * @memberof DelegateType
     */
    turnsMissed?: string;
    /**
     * Whether the delegate is currently a validator
     * @type {boolean}
     * @memberof DelegateType
     */
    validator?: boolean;
}
/**
 *
 * @export
 * @interface InfoType
 */
export interface InfoType {
    /**
     * The connected network
     * @type {string}
     * @memberof InfoType
     */
    network?: InfoType.NetworkEnum;
    /**
     * The features supported
     * @type {Array&lt;string&gt;}
     * @memberof InfoType
     */
    capabilities?: Array<string>;
    /**
     * The client identifier string
     * @type {string}
     * @memberof InfoType
     */
    clientId?: string;
    /**
     * The address used for establishing connections to the network
     * @type {string}
     * @memberof InfoType
     */
    coinbase?: string;
    /**
     * The number of the last block
     * @type {string}
     * @memberof InfoType
     */
    latestBlockNumber?: string;
    /**
     * The hash of the last block
     * @type {string}
     * @memberof InfoType
     */
    latestBlockHash?: string;
    /**
     * The number of actively connected peers
     * @type {number}
     * @memberof InfoType
     */
    activePeers?: number;
    /**
     * The number of transactions in pending pool
     * @type {number}
     * @memberof InfoType
     */
    pendingTransactions?: number;
}
/**
 * @export
 * @namespace InfoType
 */
export declare namespace InfoType {
    /**
     * @export
     * @enum {string}
     */
    enum NetworkEnum {
        MAINNET,
        TESTNET,
        DEVNET
    }
}
/**
 *
 * @export
 * @interface InternalTransactionType
 */
export interface InternalTransactionType {
    /**
     * Whether this transaction is rejected
     * @type {boolean}
     * @memberof InternalTransactionType
     */
    rejected?: boolean;
    /**
     * Call depth
     * @type {string}
     * @memberof InternalTransactionType
     */
    depth?: string;
    /**
     * Call index
     * @type {string}
     * @memberof InternalTransactionType
     */
    index?: string;
    /**
     * Call type, possibly CALL, DELEGATECALL, CALLCODE, CREATE
     * @type {string}
     * @memberof InternalTransactionType
     */
    type?: string;
    /**
     * Sender address
     * @type {string}
     * @memberof InternalTransactionType
     */
    from?: string;
    /**
     * Receiver address
     * @type {string}
     * @memberof InternalTransactionType
     */
    to?: string;
    /**
     * The sender's nonce
     * @type {string}
     * @memberof InternalTransactionType
     */
    nonce?: string;
    /**
     * The gas limit
     * @type {string}
     * @memberof InternalTransactionType
     */
    gas?: string;
    /**
     * The gas Price
     * @type {string}
     * @memberof InternalTransactionType
     */
    gasPrice?: string;
    /**
     * The value being passed, in nano SEM
     * @type {string}
     * @memberof InternalTransactionType
     */
    value?: string;
    /**
     * The data being passed, in hexadecimal string
     * @type {string}
     * @memberof InternalTransactionType
     */
    data?: string;
}
/**
 *
 * @export
 * @interface LogInfoType
 */
export interface LogInfoType {
    /**
     * Contract address
     * @type {string}
     * @memberof LogInfoType
     */
    address?: string;
    /**
     * Log data encoded in hexadecimal string
     * @type {string}
     * @memberof LogInfoType
     */
    data?: string;
    /**
     * Log topics encoded in hexadecimal string
     * @type {Array&lt;string&gt;}
     * @memberof LogInfoType
     */
    topics?: Array<string>;
}
/**
 *
 * @export
 * @interface PeerType
 */
export interface PeerType {
    /**
     * The IP address
     * @type {string}
     * @memberof PeerType
     */
    ip?: string;
    /**
     * The port number
     * @type {number}
     * @memberof PeerType
     */
    port?: number;
    /**
     * The network version
     * @type {number}
     * @memberof PeerType
     */
    networkVersion?: number;
    /**
     * The client the peer is using
     * @type {string}
     * @memberof PeerType
     */
    clientId?: string;
    /**
     * The id of the peer
     * @type {string}
     * @memberof PeerType
     */
    peerId?: string;
    /**
     * The latest block number of the peer
     * @type {string}
     * @memberof PeerType
     */
    latestBlockNumber?: string;
    /**
     * Latency between this node and the peer
     * @type {string}
     * @memberof PeerType
     */
    latency?: string;
    /**
     * The features supported by the peer
     * @type {Array&lt;string&gt;}
     * @memberof PeerType
     */
    capabilities?: Array<string>;
}
/**
 *
 * @export
 * @interface SyncingProgressType
 */
export interface SyncingProgressType {
    /**
     * Whether the node is syncing
     * @type {boolean}
     * @memberof SyncingProgressType
     */
    syncing: boolean;
    /**
     * The block height at which the sync started
     * @type {string}
     * @memberof SyncingProgressType
     */
    startingHeight?: string;
    /**
     * The current block height
     * @type {string}
     * @memberof SyncingProgressType
     */
    currentHeight?: string;
    /**
     * The target block height
     * @type {string}
     * @memberof SyncingProgressType
     */
    targetHeight?: string;
}
/**
 *
 * @export
 * @interface TransactionLimitsType
 */
export interface TransactionLimitsType {
    /**
     * The maximum transaction size in bytes
     * @type {number}
     * @memberof TransactionLimitsType
     */
    maxTransactionDataSize?: number;
    /**
     * The minimum transaction fee in nano SEM
     * @type {string}
     * @memberof TransactionLimitsType
     */
    minTransactionFee?: string;
    /**
     * The amount of nano SEM required to burn for delegate registration
     * @type {string}
     * @memberof TransactionLimitsType
     */
    minDelegateBurnAmount?: string;
}
/**
 *
 * @export
 * @interface TransactionResultType
 */
export interface TransactionResultType {
    /**
     * The number of block that included the transaction
     * @type {string}
     * @memberof TransactionResultType
     */
    blockNumber?: string;
    /**
     * The status of the transaction
     * @type {string}
     * @memberof TransactionResultType
     */
    code?: string;
    /**
     * Logs produced when executing this transaction
     * @type {Array&lt;LogInfoType&gt;}
     * @memberof TransactionResultType
     */
    logs?: Array<LogInfoType>;
    /**
     * Return data encoded in hexadecimal string
     * @type {string}
     * @memberof TransactionResultType
     */
    returnData?: string;
    /**
     * Contract address if this is a CREATE transaction, or NULL
     * @type {string}
     * @memberof TransactionResultType
     */
    contractAddress?: string;
    /**
     * The gas limit set by the sender
     * @type {string}
     * @memberof TransactionResultType
     */
    gas?: string;
    /**
     * The gas Price set by the sender
     * @type {string}
     * @memberof TransactionResultType
     */
    gasPrice?: string;
    /**
     * The gas consumed. For non-VM transactions, this field is zero
     * @type {string}
     * @memberof TransactionResultType
     */
    gasUsed?: string;
    /**
     * The transaction fee in nano SEM. For VM transactions, this field is zero
     * @type {string}
     * @memberof TransactionResultType
     */
    fee?: string;
    /**
     * Internal transactions generated when executing this transaction
     * @type {Array&lt;InternalTransactionType&gt;}
     * @memberof TransactionResultType
     */
    internalTransactions?: Array<InternalTransactionType>;
}
/**
 *
 * @export
 * @interface TransactionType
 */
export interface TransactionType {
    /**
     * The transaction hash
     * @type {string}
     * @memberof TransactionType
     */
    hash?: string;
    /**
     * The transaction type
     * @type {string}
     * @memberof TransactionType
     */
    type?: TransactionType.TypeEnum;
    /**
     * Sender's address
     * @type {string}
     * @memberof TransactionType
     */
    from?: string;
    /**
     * Recipient's address
     * @type {string}
     * @memberof TransactionType
     */
    to?: string;
    /**
     * Transaction value in nano SEM
     * @type {string}
     * @memberof TransactionType
     */
    value?: string;
    /**
     * Transaction fee in nano SEM. For CREATE/CALL, this field is zero; use gas instead
     * @type {string}
     * @memberof TransactionType
     */
    fee?: string;
    /**
     * The nonce of the sender
     * @type {string}
     * @memberof TransactionType
     */
    nonce?: string;
    /**
     * Transaction timestamp in milliseconds specified by the sender. There can be a time drift up to 2 hours.
     * @type {string}
     * @memberof TransactionType
     */
    timestamp?: string;
    /**
     * Transaction data encoded in hexadecimal string
     * @type {string}
     * @memberof TransactionType
     */
    data?: string;
    /**
     * The gas limit set by the sender
     * @type {string}
     * @memberof TransactionType
     */
    gas?: string;
    /**
     * The gas Price set by the sender
     * @type {string}
     * @memberof TransactionType
     */
    gasPrice?: string;
}
/**
 * @export
 * @namespace TransactionType
 */
export declare namespace TransactionType {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        COINBASE,
        TRANSFER,
        DELEGATE,
        VOTE,
        UNVOTE,
        CREATE,
        CALL
    }
}
/**
 *
 * @export
 * @interface AddNodeResponse
 */
export interface AddNodeResponse extends ApiHandlerResponse {
}
/**
 *
 * @export
 * @interface CallResponse
 */
export interface CallResponse extends ApiHandlerResponse {
    /**
     * The return data in hex
     * @type {string}
     * @memberof CallResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface ComposeRawTransactionResponse
 */
export interface ComposeRawTransactionResponse extends ApiHandlerResponse {
    /**
     * The composed raw transaction encoded in hexadecimal string
     * @type {string}
     * @memberof ComposeRawTransactionResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface CreateAccountResponse
 */
export interface CreateAccountResponse extends ApiHandlerResponse {
    /**
     * The address of the newly created account
     * @type {string}
     * @memberof CreateAccountResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface DeleteAccountResponse
 */
export interface DeleteAccountResponse extends ApiHandlerResponse {
}
/**
 *
 * @export
 * @interface DoTransactionResponse
 */
export interface DoTransactionResponse extends ApiHandlerResponse {
    /**
     * The transaction hash
     * @type {string}
     * @memberof DoTransactionResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface EstimateGasResponse
 */
export interface EstimateGasResponse extends ApiHandlerResponse {
    /**
     * The estimated gas usage
     * @type {string}
     * @memberof EstimateGasResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface GetAccountPendingTransactionsResponse
 */
export interface GetAccountPendingTransactionsResponse extends ApiHandlerResponse {
    /**
     *
     * @type {Array&lt;TransactionType&gt;}
     * @memberof GetAccountPendingTransactionsResponse
     */
    result?: Array<TransactionType>;
}
/**
 *
 * @export
 * @interface GetAccountResponse
 */
export interface GetAccountResponse extends ApiHandlerResponse {
    /**
     *
     * @type {AccountType}
     * @memberof GetAccountResponse
     */
    result?: AccountType;
}
/**
 *
 * @export
 * @interface GetAccountTransactionsResponse
 */
export interface GetAccountTransactionsResponse extends ApiHandlerResponse {
    /**
     *
     * @type {Array&lt;TransactionType&gt;}
     * @memberof GetAccountTransactionsResponse
     */
    result?: Array<TransactionType>;
}
/**
 *
 * @export
 * @interface GetAccountVotesResponse
 */
export interface GetAccountVotesResponse extends ApiHandlerResponse {
    /**
     *
     * @type {Array&lt;AccountVoteType&gt;}
     * @memberof GetAccountVotesResponse
     */
    result?: Array<AccountVoteType>;
}
/**
 *
 * @export
 * @interface GetBlockResponse
 */
export interface GetBlockResponse extends ApiHandlerResponse {
    /**
     *
     * @type {BlockType}
     * @memberof GetBlockResponse
     */
    result?: BlockType;
}
/**
 *
 * @export
 * @interface GetDelegateResponse
 */
export interface GetDelegateResponse extends ApiHandlerResponse {
    /**
     *
     * @type {DelegateType}
     * @memberof GetDelegateResponse
     */
    result?: DelegateType;
}
/**
 *
 * @export
 * @interface GetDelegatesResponse
 */
export interface GetDelegatesResponse extends ApiHandlerResponse {
    /**
     *
     * @type {Array&lt;DelegateType&gt;}
     * @memberof GetDelegatesResponse
     */
    result?: Array<DelegateType>;
}
/**
 *
 * @export
 * @interface GetInfoResponse
 */
export interface GetInfoResponse extends ApiHandlerResponse {
    /**
     *
     * @type {InfoType}
     * @memberof GetInfoResponse
     */
    result?: InfoType;
}
/**
 *
 * @export
 * @interface GetLatestBlockNumberResponse
 */
export interface GetLatestBlockNumberResponse extends ApiHandlerResponse {
    /**
     * The number of the latest block
     * @type {string}
     * @memberof GetLatestBlockNumberResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface GetLatestBlockResponse
 */
export interface GetLatestBlockResponse extends ApiHandlerResponse {
    /**
     *
     * @type {BlockType}
     * @memberof GetLatestBlockResponse
     */
    result?: BlockType;
}
/**
 *
 * @export
 * @interface GetPeersResponse
 */
export interface GetPeersResponse extends ApiHandlerResponse {
    /**
     *
     * @type {Array&lt;PeerType&gt;}
     * @memberof GetPeersResponse
     */
    result?: Array<PeerType>;
}
/**
 *
 * @export
 * @interface GetPendingTransactionsResponse
 */
export interface GetPendingTransactionsResponse extends ApiHandlerResponse {
    /**
     *
     * @type {Array&lt;TransactionType&gt;}
     * @memberof GetPendingTransactionsResponse
     */
    result?: Array<TransactionType>;
}
/**
 *
 * @export
 * @interface GetRootResponse
 */
export interface GetRootResponse extends ApiHandlerResponse {
}
/**
 *
 * @export
 * @interface GetSyncingProgressResponse
 */
export interface GetSyncingProgressResponse extends ApiHandlerResponse {
    /**
     *
     * @type {SyncingProgressType}
     * @memberof GetSyncingProgressResponse
     */
    result?: SyncingProgressType;
}
/**
 *
 * @export
 * @interface GetTransactionLimitsResponse
 */
export interface GetTransactionLimitsResponse extends ApiHandlerResponse {
    /**
     *
     * @type {TransactionLimitsType}
     * @memberof GetTransactionLimitsResponse
     */
    result?: TransactionLimitsType;
}
/**
 *
 * @export
 * @interface GetTransactionResponse
 */
export interface GetTransactionResponse extends ApiHandlerResponse {
    /**
     *
     * @type {TransactionType}
     * @memberof GetTransactionResponse
     */
    result?: TransactionType;
}
/**
 *
 * @export
 * @interface GetTransactionResultResponse
 */
export interface GetTransactionResultResponse extends ApiHandlerResponse {
    /**
     *
     * @type {TransactionResultType}
     * @memberof GetTransactionResultResponse
     */
    result?: TransactionResultType;
}
/**
 *
 * @export
 * @interface GetValidatorsResponse
 */
export interface GetValidatorsResponse extends ApiHandlerResponse {
    /**
     * A list of validator addresses
     * @type {Array&lt;string&gt;}
     * @memberof GetValidatorsResponse
     */
    result?: Array<string>;
}
/**
 *
 * @export
 * @interface GetVoteResponse
 */
export interface GetVoteResponse extends ApiHandlerResponse {
    /**
     * Total votes in nanoSEM
     * @type {string}
     * @memberof GetVoteResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface GetVotesResponse
 */
export interface GetVotesResponse extends ApiHandlerResponse {
    /**
     * A map of [voter address] => [votes]
     * @type {{ [key: string]: string; }}
     * @memberof GetVotesResponse
     */
    result?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface ListAccountsResponse
 */
export interface ListAccountsResponse extends ApiHandlerResponse {
    /**
     * A list of account addresses
     * @type {Array&lt;string&gt;}
     * @memberof ListAccountsResponse
     */
    result?: Array<string>;
}
/**
 *
 * @export
 * @interface SignMessageResponse
 */
export interface SignMessageResponse extends ApiHandlerResponse {
    /**
     * The message signature encoded in hexadecimal string
     * @type {string}
     * @memberof SignMessageResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface SignRawTransactionResponse
 */
export interface SignRawTransactionResponse extends ApiHandlerResponse {
    /**
     * The signed raw transaction encoded in hexadecimal string
     * @type {string}
     * @memberof SignRawTransactionResponse
     */
    result?: string;
}
/**
 *
 * @export
 * @interface VerifyMessageResponse
 */
export interface VerifyMessageResponse extends ApiHandlerResponse {
    /**
     * Whether the signature is valid
     * @type {boolean}
     * @memberof VerifyMessageResponse
     */
    valid?: boolean;
}
/**
 * SemuxApi - fetch parameter creator
 * @export
 */
export declare const SemuxApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a node to node manager.
     * @summary Add node
     * @param {string} node Address of the node in host:port format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNode(node: string, options?: any): FetchArgs;
    /**
     * Adds an IP address to blacklist.
     * @summary Add to blacklist
     * @param {string} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToBlacklist(ip: string, options?: any): FetchArgs;
    /**
     * Adds an IP address to whitelist.
     * @summary Add to whitelist
     * @param {string} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToWhitelist(ip: string, options?: any): FetchArgs;
    /**
     * Broadcasts a raw transaction to the network.
     * @summary Broadcast a raw transaction
     * @param {string} raw Raw transaction encoded in hexadecimal string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastRawTransaction(raw: string, options?: any): FetchArgs;
    /**
     * Call a VM contract.
     * @summary Call a contract.
     * @param {string} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} gas The gas limit for the call
     * @param {string} gasPrice The gas price in nano SEM
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    call(from: string, to: string, gas: string, gasPrice: string, value?: string, nonce?: string, data?: string, options?: any): FetchArgs;
    /**
     * Compose an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be signed using /sign-raw-transaction API.
     * @summary Compose an unsigned raw transaction
     * @param {&#39;MAINNET&#39; | &#39;TESTNET&#39; | &#39;DEVNET&#39;} network Network name
     * @param {&#39;TRANSFER&#39; | &#39;DELEGATE&#39; | &#39;VOTE&#39; | &#39;UNVOTE&#39; | &#39;CREATE&#39; | &#39;CALL&#39;} type Transaction type
     * @param {string} to Recipient&#39;s address
     * @param {string} value Amount of value to transfer in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [timestamp] Transaction timestamp in milliseconds. Default to current time.
     * @param {string} [data] Hexadecimal encoded transaction data.
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    composeRawTransaction(network: "MAINNET" | "TESTNET" | "DEVNET", type: "TRANSFER" | "DELEGATE" | "VOTE" | "UNVOTE" | "CREATE" | "CALL", to: string, value: string, fee?: string, nonce?: string, timestamp?: string, data?: string, gas?: string, gasPrice?: string, options?: any): FetchArgs;
    /**
     * Create a VM contract.
     * @summary Create a contract
     * @param {string} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} data The contract data encoded in hexadecimal string
     * @param {string} gas The gas limit for the call
     * @param {string} gasPrice The gas price
     * @param {string} [value] Amount of SEM to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(from: string, data: string, gas: string, gasPrice: string, value?: string, nonce?: string, options?: any): FetchArgs;
    /**
     * Creates a new account by generating a new private key or importing an existing private key when parameter 'privateKey' is provided.
     * @summary Create or import an account
     * @param {string} [name] Assigned alias to the created account.
     * @param {string} [privateKey] The private key to be imported, create a new key if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(name?: string, privateKey?: string, options?: any): FetchArgs;
    /**
     * Deletes an account from this wallet.
     * @summary Delete account
     * @param {string} address Address of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount(address: string, options?: any): FetchArgs;
    /**
     * Estimate the gas usage of a transaction.
     * @summary Estimate gas
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price in SEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateGas(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): FetchArgs;
    /**
     * Returns an account.
     * @summary Get account
     * @param {string} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(address: string, options?: any): FetchArgs;
    /**
     * Returns pending transactions from/to an account.
     * @summary Get pending transactions of the account
     * @param {string} address Address of account
     * @param {string} from Starting range of transactions
     * @param {string} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountPendingTransactions(address: string, from: string, to: string, options?: any): FetchArgs;
    /**
     * Returns transactions from/to an account.
     * @summary Get account transactions
     * @param {string} address Address of account
     * @param {string} from Starting range of transactions
     * @param {string} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTransactions(address: string, from: string, to: string, options?: any): FetchArgs;
    /**
     * Returns votes from the account.
     * @summary Get account votes
     * @param {string} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountVotes(address: string, options?: any): FetchArgs;
    /**
     * Returns a block by block hash.
     * @summary Get block by hash
     * @param {string} hash Hash of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByHash(hash: string, options?: any): FetchArgs;
    /**
     * Returns a block by block number.
     * @summary Get block by number
     * @param {string} number Number of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByNumber(number: string, options?: any): FetchArgs;
    /**
     * Returns a delegate.
     * @summary Get a delegate
     * @param {string} address Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegate(address: string, options?: any): FetchArgs;
    /**
     * Returns a list of delegates.
     * @summary Get all delegates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegates(options?: any): FetchArgs;
    /**
     * Returns kernel info.
     * @summary Get info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInfo(options?: any): FetchArgs;
    /**
     * Returns the latest block.
     * @summary Get latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlock(options?: any): FetchArgs;
    /**
     * Returns the number of the latest block.
     * @summary Get latest block number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlockNumber(options?: any): FetchArgs;
    /**
     * Returns connected peers.
     * @summary Get peers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPeers(options?: any): FetchArgs;
    /**
     * Returns all the pending transactions.
     * @summary Get pending transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTransactions(options?: any): FetchArgs;
    /**
     * Returns an object with data about the sync status
     * @summary Get syncing progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSyncingProgress(options?: any): FetchArgs;
    /**
     * Returns a transactions if exists.
     * @summary Get transaction
     * @param {string} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(hash: string, options?: any): FetchArgs;
    /**
     * Returns transaction limitations including minimum transaction fee and maximum transaction size.
     * @summary Get transaction limits
     * @param {&#39;COINBASE&#39; | &#39;TRANSFER&#39; | &#39;DELEGATE&#39; | &#39;VOTE&#39; | &#39;UNVOTE&#39; | &#39;CREATE&#39; | &#39;CALL&#39;} type Type of transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionLimits(type: "COINBASE" | "TRANSFER" | "DELEGATE" | "VOTE" | "UNVOTE" | "CREATE" | "CALL", options?: any): FetchArgs;
    /**
     * Returns the result of the requested transaction.
     * @summary Get transaction result
     * @param {string} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionResult(hash: string, options?: any): FetchArgs;
    /**
     * Returns a list of validators in Semux addresses.
     * @summary Get validators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getValidators(options?: any): FetchArgs;
    /**
     * Returns the vote from a voter to a delegate.
     * @summary Get vote
     * @param {string} delegate Delegate address
     * @param {string} voter Voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVote(delegate: string, voter: string, options?: any): FetchArgs;
    /**
     * Returns all the votes to a delegate as a map of [voter address] => [votes]
     * @summary Get a delegate's votes
     * @param {string} delegate Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVotes(delegate: string, options?: any): FetchArgs;
    /**
     * Returns accounts in the wallet.
     * @summary List accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts(options?: any): FetchArgs;
    /**
     * Executes a new message call immediately without creating a transaction on the block chain.
     * @summary Make a local call
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price in nanoSEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    localCall(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): FetchArgs;
    /**
     * Registers as a delegate
     * @summary Register delegate
     * @param {string} from Registering address
     * @param {string} data Delegate name in hexadecimal encoded UTF-8 string, 16 bytes of data at maximum
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDelegate(from: string, data: string, fee?: string, nonce?: string, options?: any): FetchArgs;
    /**
     * Sign a message.
     * @summary Sign a message
     * @param {string} address Signing address. The address must exist in the wallet.data of this Semux node.
     * @param {string} message Message to sign in UTF-8 string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signMessage(address: string, message: string, options?: any): FetchArgs;
    /**
     * Sign an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be created using /compose-raw-transaction API.
     * @summary Sign an unsigned raw transaction
     * @param {string} raw Unsigned raw transaction encoded in hexadecimal string.
     * @param {string} address Signer&#39;s address. This address must exist in the wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signRawTransaction(raw: string, address: string, options?: any): FetchArgs;
    /**
     * Transfers coins to another address.
     * @summary Transfer coins
     * @param {string} from Sender&#39;s address. The account must exist in the wallet of this node.
     * @param {string} to Recipient&#39;s address
     * @param {string} value Amount of value to transfer in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transfer(from: string, to: string, value: string, fee?: string, nonce?: string, data?: string, options?: any): FetchArgs;
    /**
     * Unvotes for a delegate.
     * @summary Unvote
     * @param {string} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Delegate address
     * @param {string} value Number of votes in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unvote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): FetchArgs;
    /**
     * Verify a signed message.
     * @summary Verify a message
     * @param {string} address Address of the message signer
     * @param {string} message Message in UTF-8 string
     * @param {string} signature Signature to verify
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMessage(address: string, message: string, signature: string, options?: any): FetchArgs;
    /**
     * Votes for a delegate.
     * @summary Vote
     * @param {string} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Delegate address
     * @param {string} value Number of votes in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): FetchArgs;
};
/**
 * SemuxApi - functional programming interface
 * @export
 */
export declare const SemuxApiFp: (configuration?: Configuration) => {
    /**
     * Adds a node to node manager.
     * @summary Add node
     * @param {string} node Address of the node in host:port format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNode(node: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AddNodeResponse>;
    /**
     * Adds an IP address to blacklist.
     * @summary Add to blacklist
     * @param {string} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToBlacklist(ip: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiHandlerResponse>;
    /**
     * Adds an IP address to whitelist.
     * @summary Add to whitelist
     * @param {string} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToWhitelist(ip: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiHandlerResponse>;
    /**
     * Broadcasts a raw transaction to the network.
     * @summary Broadcast a raw transaction
     * @param {string} raw Raw transaction encoded in hexadecimal string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastRawTransaction(raw: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse>;
    /**
     * Call a VM contract.
     * @summary Call a contract.
     * @param {string} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} gas The gas limit for the call
     * @param {string} gasPrice The gas price in nano SEM
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    call(from: string, to: string, gas: string, gasPrice: string, value?: string, nonce?: string, data?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse>;
    /**
     * Compose an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be signed using /sign-raw-transaction API.
     * @summary Compose an unsigned raw transaction
     * @param {&#39;MAINNET&#39; | &#39;TESTNET&#39; | &#39;DEVNET&#39;} network Network name
     * @param {&#39;TRANSFER&#39; | &#39;DELEGATE&#39; | &#39;VOTE&#39; | &#39;UNVOTE&#39; | &#39;CREATE&#39; | &#39;CALL&#39;} type Transaction type
     * @param {string} to Recipient&#39;s address
     * @param {string} value Amount of value to transfer in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [timestamp] Transaction timestamp in milliseconds. Default to current time.
     * @param {string} [data] Hexadecimal encoded transaction data.
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    composeRawTransaction(network: "MAINNET" | "TESTNET" | "DEVNET", type: "TRANSFER" | "DELEGATE" | "VOTE" | "UNVOTE" | "CREATE" | "CALL", to: string, value: string, fee?: string, nonce?: string, timestamp?: string, data?: string, gas?: string, gasPrice?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ComposeRawTransactionResponse>;
    /**
     * Create a VM contract.
     * @summary Create a contract
     * @param {string} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} data The contract data encoded in hexadecimal string
     * @param {string} gas The gas limit for the call
     * @param {string} gasPrice The gas price
     * @param {string} [value] Amount of SEM to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(from: string, data: string, gas: string, gasPrice: string, value?: string, nonce?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse>;
    /**
     * Creates a new account by generating a new private key or importing an existing private key when parameter 'privateKey' is provided.
     * @summary Create or import an account
     * @param {string} [name] Assigned alias to the created account.
     * @param {string} [privateKey] The private key to be imported, create a new key if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(name?: string, privateKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateAccountResponse>;
    /**
     * Deletes an account from this wallet.
     * @summary Delete account
     * @param {string} address Address of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount(address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DeleteAccountResponse>;
    /**
     * Estimate the gas usage of a transaction.
     * @summary Estimate gas
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price in SEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateGas(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EstimateGasResponse>;
    /**
     * Returns an account.
     * @summary Get account
     * @param {string} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAccountResponse>;
    /**
     * Returns pending transactions from/to an account.
     * @summary Get pending transactions of the account
     * @param {string} address Address of account
     * @param {string} from Starting range of transactions
     * @param {string} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountPendingTransactions(address: string, from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAccountPendingTransactionsResponse>;
    /**
     * Returns transactions from/to an account.
     * @summary Get account transactions
     * @param {string} address Address of account
     * @param {string} from Starting range of transactions
     * @param {string} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTransactions(address: string, from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAccountTransactionsResponse>;
    /**
     * Returns votes from the account.
     * @summary Get account votes
     * @param {string} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountVotes(address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAccountVotesResponse>;
    /**
     * Returns a block by block hash.
     * @summary Get block by hash
     * @param {string} hash Hash of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByHash(hash: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetBlockResponse>;
    /**
     * Returns a block by block number.
     * @summary Get block by number
     * @param {string} number Number of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByNumber(number: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetBlockResponse>;
    /**
     * Returns a delegate.
     * @summary Get a delegate
     * @param {string} address Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegate(address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetDelegateResponse>;
    /**
     * Returns a list of delegates.
     * @summary Get all delegates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegates(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetDelegatesResponse>;
    /**
     * Returns kernel info.
     * @summary Get info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetInfoResponse>;
    /**
     * Returns the latest block.
     * @summary Get latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlock(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetLatestBlockResponse>;
    /**
     * Returns the number of the latest block.
     * @summary Get latest block number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlockNumber(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetLatestBlockNumberResponse>;
    /**
     * Returns connected peers.
     * @summary Get peers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPeers(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPeersResponse>;
    /**
     * Returns all the pending transactions.
     * @summary Get pending transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTransactions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPendingTransactionsResponse>;
    /**
     * Returns an object with data about the sync status
     * @summary Get syncing progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSyncingProgress(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetSyncingProgressResponse>;
    /**
     * Returns a transactions if exists.
     * @summary Get transaction
     * @param {string} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(hash: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTransactionResponse>;
    /**
     * Returns transaction limitations including minimum transaction fee and maximum transaction size.
     * @summary Get transaction limits
     * @param {&#39;COINBASE&#39; | &#39;TRANSFER&#39; | &#39;DELEGATE&#39; | &#39;VOTE&#39; | &#39;UNVOTE&#39; | &#39;CREATE&#39; | &#39;CALL&#39;} type Type of transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionLimits(type: "COINBASE" | "TRANSFER" | "DELEGATE" | "VOTE" | "UNVOTE" | "CREATE" | "CALL", options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTransactionLimitsResponse>;
    /**
     * Returns the result of the requested transaction.
     * @summary Get transaction result
     * @param {string} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionResult(hash: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTransactionResultResponse>;
    /**
     * Returns a list of validators in Semux addresses.
     * @summary Get validators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getValidators(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetValidatorsResponse>;
    /**
     * Returns the vote from a voter to a delegate.
     * @summary Get vote
     * @param {string} delegate Delegate address
     * @param {string} voter Voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVote(delegate: string, voter: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetVoteResponse>;
    /**
     * Returns all the votes to a delegate as a map of [voter address] => [votes]
     * @summary Get a delegate's votes
     * @param {string} delegate Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVotes(delegate: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetVotesResponse>;
    /**
     * Returns accounts in the wallet.
     * @summary List accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListAccountsResponse>;
    /**
     * Executes a new message call immediately without creating a transaction on the block chain.
     * @summary Make a local call
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price in nanoSEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    localCall(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CallResponse>;
    /**
     * Registers as a delegate
     * @summary Register delegate
     * @param {string} from Registering address
     * @param {string} data Delegate name in hexadecimal encoded UTF-8 string, 16 bytes of data at maximum
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDelegate(from: string, data: string, fee?: string, nonce?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse>;
    /**
     * Sign a message.
     * @summary Sign a message
     * @param {string} address Signing address. The address must exist in the wallet.data of this Semux node.
     * @param {string} message Message to sign in UTF-8 string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signMessage(address: string, message: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignMessageResponse>;
    /**
     * Sign an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be created using /compose-raw-transaction API.
     * @summary Sign an unsigned raw transaction
     * @param {string} raw Unsigned raw transaction encoded in hexadecimal string.
     * @param {string} address Signer&#39;s address. This address must exist in the wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signRawTransaction(raw: string, address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignRawTransactionResponse>;
    /**
     * Transfers coins to another address.
     * @summary Transfer coins
     * @param {string} from Sender&#39;s address. The account must exist in the wallet of this node.
     * @param {string} to Recipient&#39;s address
     * @param {string} value Amount of value to transfer in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transfer(from: string, to: string, value: string, fee?: string, nonce?: string, data?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse>;
    /**
     * Unvotes for a delegate.
     * @summary Unvote
     * @param {string} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Delegate address
     * @param {string} value Number of votes in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unvote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse>;
    /**
     * Verify a signed message.
     * @summary Verify a message
     * @param {string} address Address of the message signer
     * @param {string} message Message in UTF-8 string
     * @param {string} signature Signature to verify
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMessage(address: string, message: string, signature: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VerifyMessageResponse>;
    /**
     * Votes for a delegate.
     * @summary Vote
     * @param {string} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Delegate address
     * @param {string} value Number of votes in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DoTransactionResponse>;
};
/**
 * SemuxApi - factory interface
 * @export
 */
export declare const SemuxApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Adds a node to node manager.
     * @summary Add node
     * @param {string} node Address of the node in host:port format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNode(node: string, options?: any): Promise<AddNodeResponse>;
    /**
     * Adds an IP address to blacklist.
     * @summary Add to blacklist
     * @param {string} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToBlacklist(ip: string, options?: any): Promise<ApiHandlerResponse>;
    /**
     * Adds an IP address to whitelist.
     * @summary Add to whitelist
     * @param {string} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addToWhitelist(ip: string, options?: any): Promise<ApiHandlerResponse>;
    /**
     * Broadcasts a raw transaction to the network.
     * @summary Broadcast a raw transaction
     * @param {string} raw Raw transaction encoded in hexadecimal string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastRawTransaction(raw: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Call a VM contract.
     * @summary Call a contract.
     * @param {string} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} gas The gas limit for the call
     * @param {string} gasPrice The gas price in nano SEM
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    call(from: string, to: string, gas: string, gasPrice: string, value?: string, nonce?: string, data?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Compose an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be signed using /sign-raw-transaction API.
     * @summary Compose an unsigned raw transaction
     * @param {&#39;MAINNET&#39; | &#39;TESTNET&#39; | &#39;DEVNET&#39;} network Network name
     * @param {&#39;TRANSFER&#39; | &#39;DELEGATE&#39; | &#39;VOTE&#39; | &#39;UNVOTE&#39; | &#39;CREATE&#39; | &#39;CALL&#39;} type Transaction type
     * @param {string} to Recipient&#39;s address
     * @param {string} value Amount of value to transfer in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [timestamp] Transaction timestamp in milliseconds. Default to current time.
     * @param {string} [data] Hexadecimal encoded transaction data.
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    composeRawTransaction(network: "MAINNET" | "TESTNET" | "DEVNET", type: "TRANSFER" | "DELEGATE" | "VOTE" | "UNVOTE" | "CREATE" | "CALL", to: string, value: string, fee?: string, nonce?: string, timestamp?: string, data?: string, gas?: string, gasPrice?: string, options?: any): Promise<ComposeRawTransactionResponse>;
    /**
     * Create a VM contract.
     * @summary Create a contract
     * @param {string} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} data The contract data encoded in hexadecimal string
     * @param {string} gas The gas limit for the call
     * @param {string} gasPrice The gas price
     * @param {string} [value] Amount of SEM to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(from: string, data: string, gas: string, gasPrice: string, value?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Creates a new account by generating a new private key or importing an existing private key when parameter 'privateKey' is provided.
     * @summary Create or import an account
     * @param {string} [name] Assigned alias to the created account.
     * @param {string} [privateKey] The private key to be imported, create a new key if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(name?: string, privateKey?: string, options?: any): Promise<CreateAccountResponse>;
    /**
     * Deletes an account from this wallet.
     * @summary Delete account
     * @param {string} address Address of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount(address: string, options?: any): Promise<DeleteAccountResponse>;
    /**
     * Estimate the gas usage of a transaction.
     * @summary Estimate gas
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price in SEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateGas(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): Promise<EstimateGasResponse>;
    /**
     * Returns an account.
     * @summary Get account
     * @param {string} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(address: string, options?: any): Promise<GetAccountResponse>;
    /**
     * Returns pending transactions from/to an account.
     * @summary Get pending transactions of the account
     * @param {string} address Address of account
     * @param {string} from Starting range of transactions
     * @param {string} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountPendingTransactions(address: string, from: string, to: string, options?: any): Promise<GetAccountPendingTransactionsResponse>;
    /**
     * Returns transactions from/to an account.
     * @summary Get account transactions
     * @param {string} address Address of account
     * @param {string} from Starting range of transactions
     * @param {string} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTransactions(address: string, from: string, to: string, options?: any): Promise<GetAccountTransactionsResponse>;
    /**
     * Returns votes from the account.
     * @summary Get account votes
     * @param {string} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountVotes(address: string, options?: any): Promise<GetAccountVotesResponse>;
    /**
     * Returns a block by block hash.
     * @summary Get block by hash
     * @param {string} hash Hash of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByHash(hash: string, options?: any): Promise<GetBlockResponse>;
    /**
     * Returns a block by block number.
     * @summary Get block by number
     * @param {string} number Number of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByNumber(number: string, options?: any): Promise<GetBlockResponse>;
    /**
     * Returns a delegate.
     * @summary Get a delegate
     * @param {string} address Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegate(address: string, options?: any): Promise<GetDelegateResponse>;
    /**
     * Returns a list of delegates.
     * @summary Get all delegates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegates(options?: any): Promise<GetDelegatesResponse>;
    /**
     * Returns kernel info.
     * @summary Get info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInfo(options?: any): Promise<GetInfoResponse>;
    /**
     * Returns the latest block.
     * @summary Get latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlock(options?: any): Promise<GetLatestBlockResponse>;
    /**
     * Returns the number of the latest block.
     * @summary Get latest block number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlockNumber(options?: any): Promise<GetLatestBlockNumberResponse>;
    /**
     * Returns connected peers.
     * @summary Get peers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPeers(options?: any): Promise<GetPeersResponse>;
    /**
     * Returns all the pending transactions.
     * @summary Get pending transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTransactions(options?: any): Promise<GetPendingTransactionsResponse>;
    /**
     * Returns an object with data about the sync status
     * @summary Get syncing progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSyncingProgress(options?: any): Promise<GetSyncingProgressResponse>;
    /**
     * Returns a transactions if exists.
     * @summary Get transaction
     * @param {string} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(hash: string, options?: any): Promise<GetTransactionResponse>;
    /**
     * Returns transaction limitations including minimum transaction fee and maximum transaction size.
     * @summary Get transaction limits
     * @param {&#39;COINBASE&#39; | &#39;TRANSFER&#39; | &#39;DELEGATE&#39; | &#39;VOTE&#39; | &#39;UNVOTE&#39; | &#39;CREATE&#39; | &#39;CALL&#39;} type Type of transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionLimits(type: "COINBASE" | "TRANSFER" | "DELEGATE" | "VOTE" | "UNVOTE" | "CREATE" | "CALL", options?: any): Promise<GetTransactionLimitsResponse>;
    /**
     * Returns the result of the requested transaction.
     * @summary Get transaction result
     * @param {string} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionResult(hash: string, options?: any): Promise<GetTransactionResultResponse>;
    /**
     * Returns a list of validators in Semux addresses.
     * @summary Get validators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getValidators(options?: any): Promise<GetValidatorsResponse>;
    /**
     * Returns the vote from a voter to a delegate.
     * @summary Get vote
     * @param {string} delegate Delegate address
     * @param {string} voter Voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVote(delegate: string, voter: string, options?: any): Promise<GetVoteResponse>;
    /**
     * Returns all the votes to a delegate as a map of [voter address] => [votes]
     * @summary Get a delegate's votes
     * @param {string} delegate Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVotes(delegate: string, options?: any): Promise<GetVotesResponse>;
    /**
     * Returns accounts in the wallet.
     * @summary List accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts(options?: any): Promise<ListAccountsResponse>;
    /**
     * Executes a new message call immediately without creating a transaction on the block chain.
     * @summary Make a local call
     * @param {string} to Recipient&#39;s address (the contract address)
     * @param {string} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} [value] Amount of value to transfer in nano SEM
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {string} [gas] The gas limit for the call
     * @param {string} [gasPrice] The gas price in nanoSEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    localCall(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): Promise<CallResponse>;
    /**
     * Registers as a delegate
     * @summary Register delegate
     * @param {string} from Registering address
     * @param {string} data Delegate name in hexadecimal encoded UTF-8 string, 16 bytes of data at maximum
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDelegate(from: string, data: string, fee?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Sign a message.
     * @summary Sign a message
     * @param {string} address Signing address. The address must exist in the wallet.data of this Semux node.
     * @param {string} message Message to sign in UTF-8 string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signMessage(address: string, message: string, options?: any): Promise<SignMessageResponse>;
    /**
     * Sign an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be created using /compose-raw-transaction API.
     * @summary Sign an unsigned raw transaction
     * @param {string} raw Unsigned raw transaction encoded in hexadecimal string.
     * @param {string} address Signer&#39;s address. This address must exist in the wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signRawTransaction(raw: string, address: string, options?: any): Promise<SignRawTransactionResponse>;
    /**
     * Transfers coins to another address.
     * @summary Transfer coins
     * @param {string} from Sender&#39;s address. The account must exist in the wallet of this node.
     * @param {string} to Recipient&#39;s address
     * @param {string} value Amount of value to transfer in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {string} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transfer(from: string, to: string, value: string, fee?: string, nonce?: string, data?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Unvotes for a delegate.
     * @summary Unvote
     * @param {string} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Delegate address
     * @param {string} value Number of votes in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unvote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Verify a signed message.
     * @summary Verify a message
     * @param {string} address Address of the message signer
     * @param {string} message Message in UTF-8 string
     * @param {string} signature Signature to verify
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMessage(address: string, message: string, signature: string, options?: any): Promise<VerifyMessageResponse>;
    /**
     * Votes for a delegate.
     * @summary Vote
     * @param {string} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {string} to Delegate address
     * @param {string} value Number of votes in nano SEM
     * @param {string} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {string} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
};
/**
 * SemuxApi - object-oriented interface
 * @export
 * @class SemuxApi
 * @extends {BaseAPI}
 */
export declare class SemuxApi extends BaseAPI {
    /**
     * Adds a node to node manager.
     * @summary Add node
     * @param {} node Address of the node in host:port format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    addNode(node: string, options?: any): Promise<AddNodeResponse>;
    /**
     * Adds an IP address to blacklist.
     * @summary Add to blacklist
     * @param {} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    addToBlacklist(ip: string, options?: any): Promise<ApiHandlerResponse>;
    /**
     * Adds an IP address to whitelist.
     * @summary Add to whitelist
     * @param {} ip IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    addToWhitelist(ip: string, options?: any): Promise<ApiHandlerResponse>;
    /**
     * Broadcasts a raw transaction to the network.
     * @summary Broadcast a raw transaction
     * @param {} raw Raw transaction encoded in hexadecimal string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    broadcastRawTransaction(raw: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Call a VM contract.
     * @summary Call a contract.
     * @param {} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {} to Recipient&#39;s address (the contract address)
     * @param {} gas The gas limit for the call
     * @param {} gasPrice The gas price in nano SEM
     * @param {} [value] Amount of value to transfer in nano SEM
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    call(from: string, to: string, gas: string, gasPrice: string, value?: string, nonce?: string, data?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Compose an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be signed using /sign-raw-transaction API.
     * @summary Compose an unsigned raw transaction
     * @param {} network Network name
     * @param {} type Transaction type
     * @param {} to Recipient&#39;s address
     * @param {} value Amount of value to transfer in nano SEM
     * @param {} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {} [timestamp] Transaction timestamp in milliseconds. Default to current time.
     * @param {} [data] Hexadecimal encoded transaction data.
     * @param {} [gas] The gas limit for the call
     * @param {} [gasPrice] The gas price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    composeRawTransaction(network: 'MAINNET' | 'TESTNET' | 'DEVNET', type: 'TRANSFER' | 'DELEGATE' | 'VOTE' | 'UNVOTE' | 'CREATE' | 'CALL', to: string, value: string, fee?: string, nonce?: string, timestamp?: string, data?: string, gas?: string, gasPrice?: string, options?: any): Promise<ComposeRawTransactionResponse>;
    /**
     * Create a VM contract.
     * @summary Create a contract
     * @param {} from Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {} data The contract data encoded in hexadecimal string
     * @param {} gas The gas limit for the call
     * @param {} gasPrice The gas price
     * @param {} [value] Amount of SEM to transfer in nano SEM
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    create(from: string, data: string, gas: string, gasPrice: string, value?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Creates a new account by generating a new private key or importing an existing private key when parameter 'privateKey' is provided.
     * @summary Create or import an account
     * @param {} [name] Assigned alias to the created account.
     * @param {} [privateKey] The private key to be imported, create a new key if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    createAccount(name?: string, privateKey?: string, options?: any): Promise<CreateAccountResponse>;
    /**
     * Deletes an account from this wallet.
     * @summary Delete account
     * @param {} address Address of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    deleteAccount(address: string, options?: any): Promise<DeleteAccountResponse>;
    /**
     * Estimate the gas usage of a transaction.
     * @summary Estimate gas
     * @param {} to Recipient&#39;s address (the contract address)
     * @param {} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {} [value] Amount of value to transfer in nano SEM
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {} [data] Transaction data encoded in hexadecimal string
     * @param {} [gas] The gas limit for the call
     * @param {} [gasPrice] The gas price in SEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    estimateGas(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): Promise<EstimateGasResponse>;
    /**
     * Returns an account.
     * @summary Get account
     * @param {} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getAccount(address: string, options?: any): Promise<GetAccountResponse>;
    /**
     * Returns pending transactions from/to an account.
     * @summary Get pending transactions of the account
     * @param {} address Address of account
     * @param {} from Starting range of transactions
     * @param {} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getAccountPendingTransactions(address: string, from: string, to: string, options?: any): Promise<GetAccountPendingTransactionsResponse>;
    /**
     * Returns transactions from/to an account.
     * @summary Get account transactions
     * @param {} address Address of account
     * @param {} from Starting range of transactions
     * @param {} to Ending range of transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getAccountTransactions(address: string, from: string, to: string, options?: any): Promise<GetAccountTransactionsResponse>;
    /**
     * Returns votes from the account.
     * @summary Get account votes
     * @param {} address Address of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getAccountVotes(address: string, options?: any): Promise<GetAccountVotesResponse>;
    /**
     * Returns a block by block hash.
     * @summary Get block by hash
     * @param {} hash Hash of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getBlockByHash(hash: string, options?: any): Promise<GetBlockResponse>;
    /**
     * Returns a block by block number.
     * @summary Get block by number
     * @param {} number Number of block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getBlockByNumber(number: string, options?: any): Promise<GetBlockResponse>;
    /**
     * Returns a delegate.
     * @summary Get a delegate
     * @param {} address Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getDelegate(address: string, options?: any): Promise<GetDelegateResponse>;
    /**
     * Returns a list of delegates.
     * @summary Get all delegates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getDelegates(options?: any): Promise<GetDelegatesResponse>;
    /**
     * Returns kernel info.
     * @summary Get info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getInfo(options?: any): Promise<GetInfoResponse>;
    /**
     * Returns the latest block.
     * @summary Get latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getLatestBlock(options?: any): Promise<GetLatestBlockResponse>;
    /**
     * Returns the number of the latest block.
     * @summary Get latest block number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getLatestBlockNumber(options?: any): Promise<GetLatestBlockNumberResponse>;
    /**
     * Returns connected peers.
     * @summary Get peers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getPeers(options?: any): Promise<GetPeersResponse>;
    /**
     * Returns all the pending transactions.
     * @summary Get pending transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getPendingTransactions(options?: any): Promise<GetPendingTransactionsResponse>;
    /**
     * Returns an object with data about the sync status
     * @summary Get syncing progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getSyncingProgress(options?: any): Promise<GetSyncingProgressResponse>;
    /**
     * Returns a transactions if exists.
     * @summary Get transaction
     * @param {} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getTransaction(hash: string, options?: any): Promise<GetTransactionResponse>;
    /**
     * Returns transaction limitations including minimum transaction fee and maximum transaction size.
     * @summary Get transaction limits
     * @param {} type Type of transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getTransactionLimits(type: 'COINBASE' | 'TRANSFER' | 'DELEGATE' | 'VOTE' | 'UNVOTE' | 'CREATE' | 'CALL', options?: any): Promise<GetTransactionLimitsResponse>;
    /**
     * Returns the result of the requested transaction.
     * @summary Get transaction result
     * @param {} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getTransactionResult(hash: string, options?: any): Promise<GetTransactionResultResponse>;
    /**
     * Returns a list of validators in Semux addresses.
     * @summary Get validators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getValidators(options?: any): Promise<GetValidatorsResponse>;
    /**
     * Returns the vote from a voter to a delegate.
     * @summary Get vote
     * @param {} delegate Delegate address
     * @param {} voter Voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getVote(delegate: string, voter: string, options?: any): Promise<GetVoteResponse>;
    /**
     * Returns all the votes to a delegate as a map of [voter address] => [votes]
     * @summary Get a delegate's votes
     * @param {} delegate Delegate address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    getVotes(delegate: string, options?: any): Promise<GetVotesResponse>;
    /**
     * Returns accounts in the wallet.
     * @summary List accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    listAccounts(options?: any): Promise<ListAccountsResponse>;
    /**
     * Executes a new message call immediately without creating a transaction on the block chain.
     * @summary Make a local call
     * @param {} to Recipient&#39;s address (the contract address)
     * @param {} [from] Sender&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {} [value] Amount of value to transfer in nano SEM
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {} [data] Transaction data encoded in hexadecimal string
     * @param {} [gas] The gas limit for the call
     * @param {} [gasPrice] The gas price in nanoSEM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    localCall(to: string, from?: string, value?: string, nonce?: string, data?: string, gas?: string, gasPrice?: string, options?: any): Promise<CallResponse>;
    /**
     * Registers as a delegate
     * @summary Register delegate
     * @param {} from Registering address
     * @param {} data Delegate name in hexadecimal encoded UTF-8 string, 16 bytes of data at maximum
     * @param {} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    registerDelegate(from: string, data: string, fee?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Sign a message.
     * @summary Sign a message
     * @param {} address Signing address. The address must exist in the wallet.data of this Semux node.
     * @param {} message Message to sign in UTF-8 string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    signMessage(address: string, message: string, options?: any): Promise<SignMessageResponse>;
    /**
     * Sign an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be created using /compose-raw-transaction API.
     * @summary Sign an unsigned raw transaction
     * @param {} raw Unsigned raw transaction encoded in hexadecimal string.
     * @param {} address Signer&#39;s address. This address must exist in the wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    signRawTransaction(raw: string, address: string, options?: any): Promise<SignRawTransactionResponse>;
    /**
     * Transfers coins to another address.
     * @summary Transfer coins
     * @param {} from Sender&#39;s address. The account must exist in the wallet of this node.
     * @param {} to Recipient&#39;s address
     * @param {} value Amount of value to transfer in nano SEM
     * @param {} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {} [data] Transaction data encoded in hexadecimal string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    transfer(from: string, to: string, value: string, fee?: string, nonce?: string, data?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Unvotes for a delegate.
     * @summary Unvote
     * @param {} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {} to Delegate address
     * @param {} value Number of votes in nano SEM
     * @param {} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    unvote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
    /**
     * Verify a signed message.
     * @summary Verify a message
     * @param {} address Address of the message signer
     * @param {} message Message in UTF-8 string
     * @param {} signature Signature to verify
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    verifyMessage(address: string, message: string, signature: string, options?: any): Promise<VerifyMessageResponse>;
    /**
     * Votes for a delegate.
     * @summary Vote
     * @param {} from Voter&#39;s address. The address must exist in the wallet.data of this Semux node.
     * @param {} to Delegate address
     * @param {} value Number of votes in nano SEM
     * @param {} [fee] Transaction fee in nano SEM, default to minimum fee if omitted
     * @param {} [nonce] Transaction nonce, default to sender&#39;s nonce if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemuxApi
     */
    vote(from: string, to: string, value: string, fee?: string, nonce?: string, options?: any): Promise<DoTransactionResponse>;
}
